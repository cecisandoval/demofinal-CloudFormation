Description: Demo Final CF Chida

Parameters:
  EnvironmentName: #Nombre de Enviroment
    Description: DemmoFinalCF
    Type: String
    Default: templateCF

  VpcCIDR: # Cird de VPN
    Type: String
    Default: 192.168.0.0/16

  PublicSubnet1CIDR: # Cird Sub publica 1
    Type: String
    Default: 192.168.3.0/24

  PublicSubnet2CIDR: # Cird Sub publica 2
    Type: String
    Default: 192.168.4.0/24

  PrivateSubnet1CIDR: # Cird Sub private 1
    Type: String
    Default: 192.168.1.0/24

  PrivateSubnet2CIDR: # Cird Sub private 2
    Type: String
    Default: 192.168.2.0/24

  PrivateSubnetMSQL1CIDR: # Cird Sub private MSQL 1
    Type: String
    Default: 192.168.5.0/24

  PrivateSubnetMSQL2CIDR: # Cird Sub private MSQL 2
    Type: String
    Default: 192.168.6.0/24

  KeyName: #Key for Ec2
    Description: Key Pair for EC2
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: mykey


  DBName: # The WordPress database name
    Type: String
    Default: wordpress

  DBUser: #The WordPress database admin account username
    #DatabaseMasterUsername:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    Description: The Amazon RDS master username.
    ConstraintDescription: Must contain only alphanumeric characters (minimum 8; maximum 16).
    MaxLength: 16
    MinLength: 3
    Type: String
    Default: wordpress

  DBPassword: #The WordPress database admin account passwor
    #DatabaseMasterPassword:
    AllowedPattern: ^([a-zA-Z0-9`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, spaces, and these special characters `~!#$%^&*()_+,-
    Description: The Amazon RDS master password. Letters, numbers, spaces, and these special characters `~!#$%^&*()_+,-
    MaxLength: 41
    MinLength: 8
    NoEcho: true
    Type: String
    Default: AdminCeci1

  #WPEmail:
    #AllowedPattern: ^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$
    #Description: The admin email address for WordPress and AWS notifications.
    #Type: String
    #Default: webmaster@wordpress.local


Resources:

  #Crear VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  #Crear IG
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  #Agragar IG a la VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  #Crear Subnet Publica1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1
 
  #Crear Subnet Publica2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1
  
  #Crear Subnet Privada1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet1
  
  #Crear Subnet Privada2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet2
  

  #Crear Subnet Privada1 MySQL
  PrivateSubnetMSQL1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnetMSQL1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnetMSQL1

  #Crear Subnet Privada2 MySQL
  PrivateSubnetMSQL2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnetMSQL2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnetMSQL2


  #Crear public RT
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: RT-Public

  #Ruta al IG en la RT public
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  #asociar subnets al RT pubico
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  #asociar subnets al RT pubico
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  #Crear private RT1
  Private1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: RT-private1

  #asociar subnets al RT private1
  Private1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Private1RouteTable
      SubnetId: !Ref PrivateSubnet1

  #Crear private RT2
  Private2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: RT-private2

  #asociar subnets al RT private2
  Private2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Private2RouteTable
      SubnetId: !Ref PrivateSubnet2


  #Crear private MSQL RT1
  PrivateMSQL1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: RT-private1MSQL

  #Crear private MSQL RT1
  PrivateMSQL2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: RT-private2MSQL


  #asociar subnets MSQL1 al RT private1
  Private1RouteTableAssociationMSQL:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateMSQL1RouteTable
      SubnetId: !Ref PrivateSubnetMSQL1

  #asociar subnets MSQL2 al RT private2
  Private1RouteTableAssociationMSQL:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateMSQL2RouteTable
      SubnetId: !Ref PrivateSubnetMSQL2


  # ================ Create SGs ==============

  #SG Load Balancer
  SecurityGroupLB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SecurityGroupLB
      GroupDescription: Enable port 80 LB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

  #SG Server Web 
  SecurityGroupWS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SecurityGroupWS
      GroupDescription: SG web server
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
          #SourceSecurityGroupId:
            #Fn::GetAtt:
            #- SecurityGroupLB
            #- GroupId
          #CidrIp: !Ref SecurityGroupLB
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0

  #create SG EFS 
  EfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: EfsSecurityGroup
      GroupDescription: SG EFS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0
          #SourceSecurityGroupId:
            #Fn::GetAtt:
            #- SecurityGroupLB
            #- GroupId
        #- IpProtocol: tcp
          #FromPort: 2049
          #ToPort: 2049
          #SourceSecurityGroupId:
            #Fn::GetAtt:
            #- SecurityGroupWS
            #- GroupId
          
  #create SG RDs 
  ERDSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ERDSecurityGroup
      GroupDescription: SG RDs
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId:
            Fn::GetAtt:
            - SecurityGroupLB
            - GroupId
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
          #SourceSecurityGroupId:
            #Fn::GetAtt:
            #- SecurityGroupWS
            #- GroupId
        #- IpProtocol: tcp
          #FromPort: 3306
          #ToPort: 3306
          #SourceSecurityGroupId:
            #Fn::GetAtt:
            #- EfsSecurityGroup
            #- GroupId
          
  #----New security group Pipeline test
  SecurityGroupPipeline:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SecurityGroupPipeline
      GroupDescription: Enable port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0


  # ================== EFS ====================


  ElasticFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose
      ThroughputMode: bursting

  ElasticFileSystemMountTarget0:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref ElasticFileSystem
      SecurityGroups:
      - !Ref EfsSecurityGroup
      SubnetId: !Ref PrivateSubnet1

  ElasticFileSystemMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref ElasticFileSystem
      SecurityGroups:
      - !Ref EfsSecurityGroup
      SubnetId: !Ref PrivateSubnet2



  # ============ Create RDS =========

  DBInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: ElasticFileSystem
    #DeletionPolicy: Delete
    Properties:
      DBName: !Ref DBName
      Engine: MySQL
      MultiAZ: true
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: db.t3.small
      AllocatedStorage: 5
      VPCSecurityGroups:
      - !GetAtt ERDSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DataSubnetGroup


  DataSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS Database Subnet Group for WordPress
      SubnetIds: 
        - !Ref PrivateSubnetMSQL1
        - !Ref PrivateSubnetMSQL2




  # ============== Crear Application Load Balancer ==============

  #Crear Application Load Balancer
  AppLoadBalancer:
    DependsOn: DBInstance
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: AppLoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt SecurityGroupLB.GroupId
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]


  #crear Listener LB
  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref LBTargetGourp
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP

  #crear Target group LB
  LBTargetGourp:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      #HealthCheckPath: /
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Matcher: 
        HttpCode: 200-299
      Name: LBTargetGourp
      Port: 80
      Protocol: HTTP
      TargetType: instance
      #Targets: 
        #- Id: !Ref Ec2instance
          #Port: 80
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC




  #Crear SNS notification ----
  Snsnotification:
    Type: AWS::SNS::Topic
    Properties: 
      #ContentBasedDeduplication: false
      DisplayName: Snsnotification
      Subscription:
        - Endpoint: "cecilia_sandoval@epam.com"
          Protocol: "email"
      TopicName: Snsnotification




  #WebLaunchConfiguration
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: AppLoadBalancer
    Properties:
      AssociatePublicIpAddress: true
      #IamInstanceProfile: !Ref WebInstanceProfile
      SecurityGroups: 
        - !Ref SecurityGroupWS
      ImageId: ami-0399b3f89a7f212a3 # amzn linux ami-0cff7528ff583bf9a
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64:
          Fn::Sub:
          - |
            #!/bin/bash -xe
            EFSMOUNT="/srv/www/"
            if grep -qs "$EFSMOUNT" /proc/mounts; then
              echo "1"
            else
              if [[ ! -d "/srv/www/" ]]; then
                sudo mkdir -p /srv/www
                echo "2"
              fi
            fi
            sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${ElasticFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /srv/www/
            echo "3"
            if [[ ! -f "/srv/www/wordpress/wp-config.php" ]]; then
              echo "copiar archivos a carpeta"
              sudo chown www-data: /srv/www
              sudo -u www-data cp -R /srv/www1/wordpress /srv/www/.
            fi
            sudo a2ensite wordpress
            sudo a2enmod rewrite
            sudo a2dissite 000-default
            sudo service apache2 reload
            if [[ ! -f "/srv/www/wordpress/wp-config.php" ]]; then
              echo "============ARCHIVOS================="
              sudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php
              ls -l  /srv/www/wordpress
              sed -i "s/'username_here'/'wordpress'/g" /srv/www/wordpress/wp-config.php
              sed -i "s/'password_here'/'AdminCeci1'/g" /srv/www/wordpress/wp-config.php
              sed -i "s/'database_name_here'/'wordpress'/g" /srv/www/wordpress/wp-config.php
              sed -i "s/'localhost'/'${DBInstance.Endpoint.Address}:3306'/g" /srv/www/wordpress/wp-config.php
            fi
            cat /srv/www/wordpress/wp-config.php
            cat /etc/apache2/sites-available/wordpress.conf
            echo "============todo=bien=final================="
          - DB_User: !Ref DBUser
            DB_Password: !Ref DBPassword
            DB_Name: !Ref DBName
            #WP_Email: !Ref WPEmail
            LBdns: !GetAtt AppLoadBalancer.DNSName
            DB_ENDPOINT:  !GetAtt DBInstance.Endpoint.Address



  # ===================== autoscaling group ==============

  #Crear Autoscaling group
  AutoScalingGroupTask10:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: AutoScalingGroupTask10
      AvailabilityZones: 
        - !Select [ 0, !GetAZs '' ]
        - !Select [ 1, !GetAZs '' ]
      #CapacityRebalance: Boolean
      #Context: String
      Cooldown: 60
      #DefaultInstanceWarmup: Integer
      DesiredCapacity: 1
      DesiredCapacityType: units
      HealthCheckGracePeriod: 30
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref LaunchConfig
      #LaunchTemplate: 
        #LaunchTemplateSpecification
      #LifecycleHookSpecificationList: 
        #- LifecycleHookSpecification
      #LoadBalancerNames: 
        #- !Ref AppLoadBalancer
      MaxSize: 1
      #MetricsCollection: 
        #- MetricsCollection
      MinSize: 1
      #MixedInstancesPolicy: 
        #MixedInstancesPolicy
      NewInstancesProtectedFromScaleIn: false
      NotificationConfigurations:
        - TopicARN: !Ref Snsnotification
          NotificationTypes:
          - autoscaling:EC2_INSTANCE_LAUNCH
          - autoscaling:EC2_INSTANCE_TERMINATE
      TargetGroupARNs: 
        - !Ref LBTargetGourp
      TerminationPolicies: 
        - NewestInstance 
        - Default
      VPCZoneIdentifier: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2


  #Crear Autoscaling Policy scale out
  ASGScalingUPPolicyHigh:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroupTask10
      PolicyType: StepScaling
      AdjustmentType: ChangeInCapacity
      StepAdjustments: 
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 1

  #Crear Autoscaling Policy scale in
  ASGScalingInPolicyDown:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroupTask10
      PolicyType: SimpleScaling
      AdjustmentType: ExactCapacity
      #StepAdjustments: 
        #- MetricIntervalLowerBound: 0
      ScalingAdjustment: 2

  #Crear Alarma CW CPU > 70% scale out
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '70'
      AlarmDescription: 'Scale out if CPU > 70% for 1 minute'
      Period: '60'
      AlarmActions:
      - !Ref ASGScalingUPPolicyHigh
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: AutoScalingGroupTask10
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: CPUUtilization

  #Crear Alarma CW CPU < 40% scale in
  CPUAlarmDown:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '40'
      AlarmDescription: 'Scale in if CPU < 40% for 1 minute'
      Period: '60'
      AlarmActions:
      - !Ref ASGScalingInPolicyDown
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: AutoScalingGroupTask10
      ComparisonOperator: LessThanOrEqualToThreshold
      MetricName: CPUUtilization




